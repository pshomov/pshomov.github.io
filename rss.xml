<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Petar's blog]]></title><description><![CDATA[Petar's blog]]></description><link>http://pshomov.github.io</link><generator>metalsmith-feed</generator><lastBuildDate>Tue, 02 Jun 2015 23:21:30 GMT</lastBuildDate><atom:link href="http://pshomov.github.io/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Petar Shomov]]></author><item><title><![CDATA[Worry-free MVVM with Xamarin Forms]]></title><description><![CDATA[<p><strong>TL;DR</strong> - Super-clean MVVM example with automatic Command status updates <a href="https://github.com/pshomov/mvvmeasy">here</a></p>
<hr>
<p>Xamarin Forms is great for writing decent looking applications on all three major mobile platforms - iOS, Android and Windows Mobile. The Xaml support and databindings are great help to keep things clean and simple. </p>
<p>So I am working on a Xamarin Forms project where we were in the process of choosing some framework or library to help us with implementing the MVVM pattern and more specifically the view models where it is necessary to send notifications as properties get changed. We looked at <a href="http://www.mvvmlight.net">MvvmLight</a> as well as a preview version of <a href="http://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/">Prism</a>. Both of them provide a base class which has helper methods for implementing properties with sending notifications. Here is how a simple Login view model looks with Prism</p>
<script src="https://gist.github.com/pshomov/e35832cbf51c82ac50c7.js"></script>

<p>A couple of things to notice here:</p>
<ul>
<li>Lot&#39;s of repetitive code in the property getters and setters</li>
<li>Extra complexity in both the property setters and the command itself due to keeping the enabled/disabled state of the Login command in sync (lines 22, 30, 63 and 72)</li>
<li>We need extra (and may I say not particularly pretty) testing of whether the property change notifications were sent and the update of the Login command status was triggered</li>
</ul>
<p>In order to clean things up let&#39;s use <a href="https://github.com/Fody/PropertyChanged#your-code">Fody.PropertyChanged</a> and get rid of Prism&#39;s BindableBase. If you have not looked at this MVVM specialized weaver, please take your time now to get introduced. I think you might like it.
And here is how the new model looks like:</p>
<script src="https://gist.github.com/pshomov/eb3f85471e632bbcb9f6.js"></script>

<p>I think Fody.PropertyChanged is great, it helps us get rid of those super-boring, error-prone property getters and setters but unfortunately does nothing about updating the Login command state. In fact this version of the model does not work correctly since the Login command never gets enabled. One way to fix this problem is by making the Login command state be more MVVM-y. To do that let&#39;s use <a href="https://github.com/pshomov/mvvmeasy/blob/master/Infrastructure/MVVMCommand.cs">MVVMCommand</a> which is exactly like a normal Xamarin Forms Command except the second parameter has to be a lambda that returns the value of a property. Let&#39;s see how the fixed model looks:</p>
<script src="https://gist.github.com/pshomov/4b158ca0b0801809b0d6.js"></script>

<p>Notice how in line 28 the state of the command becomes extracted to a property - IsLoginEnabled. The reason that is good is because it plays on the strength of Fody.PropertyChanged. <strong>Meaning that Fody.PropertyChanged sends out ProprtyChanged notifications about IsLoginEnabled whenever one of the properties it&#39;s value is based on changes</strong>. Now all MVVMCommand needs to do is listen for those notifications and do the updating of the enabled/disabled command state. It&#39;s actually pretty simple:</p>
<script src="https://gist.github.com/pshomov/4e2b51ef94ca3c6cc508.js"></script>

<p>Testing this model now becomes really a rather simple and elegant exercise of changing properties and asserting on the value of other properties and no need to worry about bookkeeping regarding who update who.</p>
<p>Hope this makes sense, the source for a complete example is on <a href="https://github.com/pshomov/mvvmeasy">GitHub</a>.</p>
<p><strong>BTW</strong>: Sorry for not providing a way to do comments, now actively working on it, I promise. Meanwhile please <a href="https://github.com/pshomov/mvvmeasy/issues">create an issue on the example</a> and let&#39;s have the conversation over there ;) </p>
]]></description><link>http://pshomov.github.io/worry-free-mvvm-with-xamarin-forms</link><guid isPermaLink="true">http://pshomov.github.io/worry-free-mvvm-with-xamarin-forms</guid><dc:creator><![CDATA[Petar Shomov]]></dc:creator><pubDate>Mon, 25 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Elements - visible, invisible and missing (part 2)]]></title><description><![CDATA[<p>In my last post I was going over the elements of a blog that I use in my little experiment. Now, for the rest ...</p>
<p>What I have <em>not added</em> is links to similar posts, my twitter stream, blog rolls, archive, like button, retweet button, G+ button and all kinds of other buttons that are mostly create noise, do not look esthetically pleasing and seldomly used. Other omissions include footer, site map, copyright notices and all kinds of what I consider cruft.</p>
<p>Finally for the <em>invisible</em> - I have what seems to be an Atom feed for the web site and that one is machine discoverable but I decided to not make an official link to it on the site. Basically if you go to a site like <a href="http://feedly.com">Feedly</a> and paste the url for the blog, the feed link will be descovered and used. And that I think is enough visibility for that element. I think I will also try to surface that feed in the Google result if that is possible.</p>
]]></description><link>http://pshomov.github.io/elements-visible-invisible-and-missing-part-2</link><guid isPermaLink="true">http://pshomov.github.io/elements-visible-invisible-and-missing-part-2</guid><dc:creator><![CDATA[Petar Shomov]]></dc:creator><pubDate>Sat, 31 May 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Elements - visible, invisible and missing (part 1)]]></title><description><![CDATA[<p>I am trying to get my first visual iteration of the blog and it is taking longer then I expect (which in itself was expected, sigh ...) so I thought while I am working on that I should first briefly note the visual elements, the concepts if you will, that I have included here and the ones I have not. My understanding of design is a big part of it is about making choices of what you offer and also what you <em>do not</em> offer, both parts on par in their importance.</p>
<p>For the accidental visitors of my blog I would like them to first and foremost notice the content and then may be if they are interested make it easy get a feeling for who the auther is (that would be me).</p>
<p><strong>Content</strong> is a list of posts, each of which has a title, content and date of creation. That has to be the minimum with the obvious omission of comments. I mean I could have skipped date but I do find myself looking at the date of other people&#39;s posts so why shouldn&#39;t I do the same, right?
<br>Comments are not here mostly due to not having a particularly clear idea how to add them to my statically hosted blog. I have a feeling they are coming soon though.</p>
<p><strong>Author</strong> is the section where the visitor can get some <em>feeling</em> about the person writing those words.
A picture and a name should be a good start. The name itself is a link to the very first post in this blog where I indulged myself in a bit more of an introduction of my character. Thought that level of intimacy should require the trouble of clicking a link ;)
<br>GitHub and Twitter links to my accounts would reveal a bit more about me should the visitor feel compelled to find out more about yours truely.</p>
<p>I am pretty happy about my selection of elements, still it is definitely subject to change.</p>
<p>Next time - the <em>invisible</em> and all the things I did not add ...</p>
]]></description><link>http://pshomov.github.io/elements-visible-invisible-and-missing-part-1</link><guid isPermaLink="true">http://pshomov.github.io/elements-visible-invisible-and-missing-part-1</guid><dc:creator><![CDATA[Petar Shomov]]></dc:creator><pubDate>Mon, 19 May 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[A design exercise]]></title><description><![CDATA[<p>So I am all fired up about not sucking so much designing web and mobile apps and I though I really need some exercise. I recently read this great book - <a href="http://www.amazon.com/Design-Hackers-Reverse-Engineering-Beauty/dp/1119998956">Design for Hackers: Reverse Engineering Beauty</a> and I thought - why not start a blog in the rawest form possible and little by little try to make it better. Looking forward to iteration one ;) </p>
]]></description><link>http://pshomov.github.io/a-design-exercise</link><guid isPermaLink="true">http://pshomov.github.io/a-design-exercise</guid><dc:creator><![CDATA[Petar Shomov]]></dc:creator><pubDate>Wed, 07 May 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction]]></title><description><![CDATA[<p>Hello, my name is Petar Shomov and this is my blog. I am a software developer with about 20 years in the industry. I think I am doing and learning about interesting things so I thought I should share them and probably do them even better because of that. I am interested most recently in design of all things digital but I like architect-y things as well as programm-y things. I work mostly in OSX and Linux but I have spent way too much time in Windows too.</p>
]]></description><link>http://pshomov.github.io/introduction</link><guid isPermaLink="true">http://pshomov.github.io/introduction</guid><dc:creator><![CDATA[Petar Shomov]]></dc:creator><pubDate>Fri, 02 May 2014 00:00:00 GMT</pubDate></item></channel></rss>