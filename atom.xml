<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title><![CDATA[ Petar's blog ]]></title>
  <link href="http://pshomov.github.io/"/>
  <link type="application/atom+xml" rel="self" href="http://pshomov.github.io/atom.xml"/>
  <updated>2015-11-25T10:00:000</updated>  
  <id>http://pshomov.github.io/</id>
  <author>
    <name>Petar Shomov</name>
    <email>pshomov@gmail.com</email>
  </author>

  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/better-mvvm-with-xamarin-forms"/>
    <title>Better MVVM with Xamarin Forms</title>
    <published>2015-11-25</published>
    <updated>2015-11-25</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>Let&#39;s start with a quick recap of the reasons I am writing this post. </p>
<h3 id="the-problem">The problem</h3>
<p>I find most examples on the web regarding how to write MVVM apps at fault when it comes to choosing where to place the logic about the flow and behaviour of the app - almost all logic is stuffed into the view models. The <em>Model</em> in MVVM is limited to service/repository wrappers and their DTOs. I think we can do better, I think the model has to be much richer and the view models much smaller.<br>
Then I found <a href="http://redux.js.org">Redux</a> and I knew exactly what I needed to do, so I ported it to .NET and its name is <a href="https://github.com/pshomov/reducto">Reducto</a>. I introduced it in a <a href="/compartmentalizing-logic/">previous post</a> and there is a quick refresher on that in a following section, but for a more detailed overview, please head over <a href="/compartmentalizing-logic/">here</a>. </p>
<h3 id="agenda-for-this-post">Agenda for this post</h3>
<p>In this post the rubber meets the road - Reducto orchestrating your Xamarin Forms app. I am going to focus on a very small part of an app - logging in a user. I think it is sufficiently simple and common and will allow me to focus on the technology necessary for building the feature.</p>
<p>There are some small pieces of glue that I might not talk about here but they are rather simple and live under the <a href="https://github.com/pshomov/reducto.sample/blob/master/src/Reducto.Sample/Infrastructure"><code>Infrastructure</code></a> folder in the <a href="https://github.com/pshomov/reducto.sample">sample project</a> where all material here is taken from.
Although the example is with Xamarin Forms, everything should be applicable to other implementations of MVVM too. </p>
<h3 id="reducto-redux-recap">Reducto <del>redux</del> recap</h3>
<p>Reducto is a keeper of the state for your app. It helps to organize the logic that changes that state.</p>
<p>A quick refresher on the core concepts in Reducto:</p>
<ul>
<li><strong>Action</strong> - an object which describes what has happened - LoggedIn, SignedOut, etc. The object contains all the information relevant to the action - username, password, status, etc. Usually there are many actions in an app. </li>
<li><strong>Reducer</strong> - a side-effect free function that receives the current state of your app and an action. If the reducer does not know how to handle the action it should return the state as is. If the reducer can handle the action it 1.) makes a copy of the state 2.) it modifies it in response to the action and 3.) returns the copy.</li>
<li><strong>Store</strong> - it is an object that contains your app&#39;s state. It also has a reducer. We <em>dispatch</em> an action to the store which hands it to the reducer together with the current app state and then uses the return value of the reducer as the new state of the app. There is only one store in your app. It&#39;s created when your app starts and gets destroyed when your app quits. Your MVVM view models can <em>subscribe</em> to be notified when the state changes so they can update themselves accordingly. </li>
<li><strong>Async action</strong> - a function that may have side effects. This is where you talk to your database, call a web service, navigate to a view model, etc. Async actions can also dispatch actions (as described above). To execute an async action it needs to be <em>dispatched</em> to the <em>store</em>.</li>
<li><strong>Middleware</strong> - I will leave this part out for now</li>
</ul>
<p>Dispatching an action to the store is <strong>the only way to change its state</strong>.<br>
Dispatching an <em>async action</em> cannot change the state but it can dispatch <em>actions</em>(more about that in a few paragraphs) which in turn can change the state.</p>
<h3 id="async-actions">Async actions</h3>
<p>Let&#39;s jump right in and show you the action of logging a user in. It has to be async action since it needs to talk to the &quot;external world&quot;</p>
<script src="https://gist.github.com/pshomov/c534fb9eb3052dcc3f67.js?file=async.action.cs"></script>

<p>Let&#39;s start with a few observation about async actions in general. </p>
<ul>
<li><p>Use the <code>store</code>&#39;s <code>asyncAction</code> or <code>asyncActionVoid</code> methods to create async action. <div style="display:none"> In more detail: Async actions are best created by helper methods such as <code>asyncActionVoid</code> since they might need to receive their arguments in two stages - at the place of the <em>dispatching</em> of the action and then later on internally in Reducto. So a little bit of currying is used to achieve that, take a look.<br><script src="https://gist.github.com/pshomov/c534fb9eb3052dcc3f67.js?file=asyncaction.void.cs"></script>
</div></p>
</li>
<li><p>As you can see, an async action takes as a first parameter a <em>dispatch</em> delegate which allows the async action to dispatch synchronous ones. This comes useful when it is needed to update the app state. The second parameter is another delegate which allows us to get the app state - <em>getState</em>, useful if we need that info to make some decision about the behaviour. The third parameter is optional and is the only way for the one <em>invoking</em> the async action to pass some information to it(remember that currying part? this&#39;s why). If the action does not need any parameters at the time of the invocation, go ahead and create async action with only two parameters.</p>
</li>
<li><p>The result of an async action can be either <code>Task</code> or <code>Task&lt;T&gt;</code> and such async actions are created respectively by  <code>asyncActionVoid</code> and <code>asyncAction</code> methods of the <code>Store</code>.</p>
</li>
</ul>
<p>Coming back to this specific action - it returns <code>Task</code> and expects a parameter of type <code>LoginInfo</code> at the time of its invocation, containing the username and password the user has specified.
It dispatches actions corresponding to the progress and the outcome of the operation. Also worth noticing is it navigates to another view model upon successful authentication.</p>
<h3 id="the-app-state">The app state</h3>
<p>The login async action is dispatching actions before and after the long-running network operation, but how does that affect the view on the screen? - the actions are handled by the mini-reducer responsible for that part of the state and the state is updated accordingly. </p>
<p>Before we look at the reducer let&#39;s take a look at the declaration of the app state.</p>
<script src="https://gist.github.com/pshomov/c534fb9eb3052dcc3f67.js?file=app.store.cs"></script>

<p>The idea here is that the complete state of the app is broken down into smaller chunks which are handled by dedicated mini-reducers. Divide and conquer my friends, divide and conquer <i class="em em-wink"></i>.</p>
<p>The details about <code>DeviceListPageState</code> are intentionally missing since it is not important for this discussion.</p>
<h3 id="the-reducer">The reducer</h3>
<p>What follows is an abbreviated version of the <code>App</code> class where all &quot;app logic&quot; lives and the reducer is an important part of it.</p>
<script src="https://gist.github.com/pshomov/c534fb9eb3052dcc3f67.js?file=app.declaration.cs"></script>

<p>A few things here. The reducer for the store is a <code>CompositeReducer</code> and it delegates the responsibility for different parts of the app state to other reducers, in this case - a couple of <code>SimpleReducers</code>, but this sort of brake down can be nested further - <a href="https://github.com/pshomov/reducto/blob/master/src/Reducto.Tests/ReducersTests.cs#L89">here is an example</a>. </p>
<p>Worth noting also is the constructor of <code>SimpleReducer</code> where we can create the initial value for the state this reducer governs. If not provided - the state gets initilized with default values.</p>
<h3 id="view-model">View model</h3>
<p>Let&#39;s take a look at the view model for the LoginPageView</p>
<script src="https://gist.github.com/pshomov/c534fb9eb3052dcc3f67.js?file=viewmodel.cs"></script>

<p>I have a very simple base class for my view models - <a href="https://github.com/pshomov/reducto.sample/blob/master/src/Reducto.Sample/Infrastructure/ViewModel.cs"><code>ViewModel</code></a>, which helps me find its view based on a very simple convention. Comes handy when I have to do navigation. I am also using the great <a href="https://github.com/Fody/PropertyChanged">Fody.PropertyChanged</a> which saves me the annoyance of dealing with <code>INotifyPropertyChanged</code>.</p>
<p>As you can see the view model itself is quite simple. Dispatches the Login async action with the username and password the user has provided and listens for updates to the store and updates its properties accordingly.
<code>Store.createAsyncActionCommand</code> is an extension method that creates an <code>ICommand</code> that dispatches an action and is something that is not part of Reducto, but might put in an Reducto.XamarinForms nuget package. For now, you can go see <a href="https://github.com/pshomov/reducto.sample/blob/master/src/Reducto.Sample/Infrastructure/CommandToAction.cs">the source code</a></p>
<h3 id="conclusion">Conclusion</h3>
<p>Needless to say this structuring of an app makes a lot more sense to me:</p>
<ul>
<li>The real logic of the app is in one place and not mixed with other concerns. To quote the late Yogi Berra  <blockquote>
<p>You can observe a lot just by watching</p>
</blockquote>
</li>
<li><em>Testing</em> the logic is quite nice too. Reducers are very easy to test since they are so simple and all you need to do is give them state and an action and compare the result to what you expected it to be. Async actions which are the other half of the logic in the app need a bit more setup - mocking and stubbing but all in all pretty good experience too.</li>
</ul>
<p>I know these are still early days for Reducto and may be there are some issues to be addressed but if you like where this is going, please open an issue and let&#39;s make it better.</p>
<p>The source code for the full sample app this post is based on can be found on <a href="https://github.com/pshomov/reducto.sample">GitHub</a>. </p>
<p>Common guys, hit the comments and let me know what you think <i class="em em-wink"></i>. </p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/compartmentalizing-logic"/>
    <title>Compartmentalizing logic</title>
    <published>2015-10-27</published>
    <updated>2015-10-27</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>Alright, this is the thing that I have had burning desire to share with you. I think it is awesome. But before I get to that I would like to give you a quick outline how I got here.</p>
<p>My <a href="/common-problems-with-mvvm-apps-take-two/">last post</a> I was telling you about the friction I experienced trying to build a Xamarin Forms MVVM - all kinds of logic in view models, hard to have overview, hard to test, hard to understand. I considered <a href="http://reactiveui.net">ReactiveUI</a> since I found it really really promising. I also found it to be too much of an all-in kind of proposition and the lack of documentation to even get started really killed it for me. Turned to JavaScript community in search of good ideas, considered Flux and almost started on a Flux-inspired port in .NET. </p>
<p>And then I bumped into <a href="http://redux.js.org">Redux</a> and I <em>loved</em> everything about it - simple, powerful, versatile. It&#39;s like I head a blurry image of what I wanted and Redux just put everything in focus. I immediately knew it was exactly what I was looking for.</p>
<p>So I rushed out and made a port to .NET which I call <a href="http://github.com/pshomov/reducto">Reducto</a>.</p>
<p>Let me try to explain the basic concepts in Reducto:</p>
<ul>
<li><strong>Action</strong> - an object which describes what has happened - LoggingIn, SignedOut, etc. The object contains all the information relevant to the action - username, password, status, etc. Usually there are many actions in an app</li>
<li><strong>Reducer</strong> - a side-effect free function that receives the current state of your app and an action. If the reducer does not know how to handle the action it should return the state as is. If the reducer can handle the action it makes a copy of the state, it modifies it in response to the action and returns the copy.</li>
<li><strong>Store</strong> - it is an object that contains your whole app&#39;s state. It also has a reducer. We <em>dispatch</em> an action to the store which hands it to the reducer together with the current app state and then uses the return value of the reducer as the new state of the app. There is only one store in your app. It&#39;s created when your app starts and gets destroyed when your app quits. Your MVVM view models can <em>subscribe</em> to be notified when the state changes so they can update themselves accordingly. </li>
</ul>
<p>Having a single reducer operate on the whole state of the app probably sounds a bit scary but the trick is to <a href="https://en.wikibooks.org/wiki/Muggles%27_Guide_to_Harry_Potter/Magic/Reducto#Overview"><em>compose</em> the reducer from many smaller, simpler reducers</a> which distribute the responsibility of updating different parts of the state. More on that in my next post. </p>
<p>The basic idea is to create a store and give it a reducer(a composite one quite likely). We dispatch actions to the store which, with the help of reducers, updates the state. Rinse and repeat.</p>
<p>Besides these core concepts in Reducto(and Redux) there are a couple more that are quite useful:</p>
<ul>
<li><strong>Async action</strong> - a function that may have side effects. This is where you talk to your database, call a web service, navigate to a view model, etc. Async actions can also dispatch actions (as described in the core concepts). </li>
<li><strong>Middleware</strong> - these are functions that can be hooked in the Store dispatch mechanism so you can do things like logging, profiling, authorization, etc. It&#39;s sort of a plugin mechanism which can be quite useful.</li>
</ul>
<p>Let&#39;s jump right in and see an example. Let&#39;s look at a very simple model of the app state which is only concerned with logging a user in. To make things simple I have presented this in the form of a unit test with the assertions showing what the expectations are</p>
<script src="https://gist.github.com/pshomov/d3cd0ffa326dc042cf31.js"></script>

<p>The example starts off with defining the app state - LoginState. Point of interest here is that it is a <code>struct</code>. Remember that app state is passed to the reducer which is supposed to return a copy of it. <code>Struct</code>s have the benefit of being passed by value by default so they get copied naturally whenever they are passed as an argument.</p>
<p>Defined are two actions - LoginStarted and LoginSucceeded. They contain interesting information submitted from the user in the case of the former action and the authenticating service for the latter one.<br>
On Line 31 we define a reducer for the app state and then we define how we handle both actions. On a side note, if an action is dispatched that is not handled by the reducer, he sends the app state unmodified back.</p>
<p>Line 45 defines the app store and let the store have its reducer.<br>
Line 47 we see a subscription to the store, which gets notified whenever there is an update to the state. In line 70 we remove the subscription.</p>
<p>So here are the benefits that I see</p>
<ul>
<li>the logic is isolated in those reducers</li>
<li>defining the reducers is very simple and does not require creating classes, inheriting or anything like that. A function is enough.</li>
<li>testing is extremely simple - dispatch some actions, assert on the state</li>
<li>framework agnostic - MVVM, MVC, WebForms apps can use it, but also this seems like an all around good way to structure all kinds of apps really.</li>
</ul>
<p>A few interesting statistics regarding Reducto</p>
<table>
<thead>
<tr>
<th>Metric</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>lines of code</td>
<td>~260</td>
</tr>
<tr>
<td>dependencies</td>
<td>0</td>
</tr>
<tr>
<td>packaging</td>
<td><a href="https://www.nuget.org/packages/Reducto/">NuGet PCL</a></td>
</tr>
</tbody>
</table>
<p>In my next post I will dive a bit deeper in Reducto - Async actions and Composite reducers and connecting all of this in a Xamarin Forms app. 
The code for that post is already in development <a href="https://github.com/pshomov/reducto.sample">over here</a>.</p>
<p>And please, do share your thoughts in the comments ;) </p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/common-problems-with-mvvm-apps-take-two"/>
    <title>Common problems with MVVM apps - take two</title>
    <published>2015-09-28</published>
    <updated>2015-09-28</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>My last post <a href="/common-problems-with-mvvm-apps/">Common problems with MVVM</a> was it seems pretty vague and needs a concrete example to make a bit more sense. Not to mention in an attempt to not sound too authoritative I managed to represent myself like someone who is just starting with MVVM and and is taking too big of a bite.</p>
<p>Let&#39;s dive right into a typical example of a login page view model from a Xamarin Forms app:</p>
<script src="https://gist.github.com/pshomov/eb03fc62e07b9497d12a.js"></script>

<p>In case you are wondering - I am using <a href="https://github.com/Fody/PropertyChanged">Fody.PropertyChanged</a> to skip the minutiae of property change notifications. </p>
<p>The problem in my opinion is in the Login command - lines 23-25. Upon triggering the Login command the view model invokes the authentication process and in the case of success, navigates to the &quot;main&quot; view.</p>
<ol>
<li>The view model should not know about the authentication process at all. Neither when nor how it should be accomplished. It&#39;s not important to the view and makes it harder to test it. Should we decide to handle failure to authenticate, the code in that login command will get more complicated real quick.  </li>
<li>The view model should not know anything about the navigation process. Again neither when nor how. Not relevant to the view. It makes it more difficult to experiment with the view or use it in a different way - for example for Sign Up.</li>
</ol>
<p>I think we would be better off with a view model more like this one:</p>
<script src="https://gist.github.com/pshomov/b297f5e661f88689cca4.js"></script>

<p>Yes, I made up a pubsub &quot;thing&quot; that allows for publishing and subscribing ;-).</p>
<p>Generally speaking if view models are not the place for app logic, what kind of logic should be in there? I think we should have there animation logic, syncing states between controls in the view and in general logic directly connected to the view itself and its components.</p>
<p>Now this model is much simpler and rather easy to test. In fact it is so simple I think I just lost interest in testing it.</p>
<p>I would rather test the logic that controls it, and that is what I really wanted to get you curious about ;)</p>
<p>I will keep working on that new sample but meanwhile I encourage you to post your thoughts in the comments below.</p>
<p>Until next time.</p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/common-problems-with-mvvm-apps"/>
    <title>Common problems with MVVM apps</title>
    <published>2015-09-22</published>
    <updated>2015-09-29</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>Those few who have read my blog before might remember me raving about the combo <a href="/worry-free-mvvm-with-xamarin-forms/">Fody.PropertyChanged + MVVMCommand</a>. I was pretty excited to get some good comments on that post and it is really <a href="/worry-free-mvvm-with-xamarin-forms/#comments">the comments</a> that are the reason I am writing this post.</p>
<p>I have to say it right away - I am not very experienced writing MVVM apps. I am quite experienced developer (~20 years of experience) but I just haven&#39;t been around <strong>native desktop</strong> app development in the last 10 years. I did find myself involved recently however in Xamarin.Forms mobile apps and I must say MVVM is pretty nice. I should mention I have been doing a lot of web development in JavaScript both server and client side which should bring back a bit of credibility to my observations.</p>
<p><em>UPDATE:</em> I realized I seem to have underplayed myself so here is what I would rather say - I have read and watched a lot connected with MVVM and have about 1 year of on/off writing MVVM apps(Xamarin Forms). I also have been using or examining UI frameworks in JavaScript, Ruby, Python. Mostly JavaScript though.</p>
<p>So after being around <a href="http://angularjs.org">AngularJS</a> and <a href="http://facebook.github.io/react/">React</a> here are the things that I find wrong with most of the examples of MVVM apps I find on the web:</p>
<ul>
<li><p><strong>App logic is distributed and disconnected</strong></p>
<p>This is the main point really and the other two are a consequence of it - there is no central app object or a system which controls the flow and holds the state of the app.</p>
</li>
<li><p><strong>Too much logic and responsibilities in the <del>views</del>view models</strong></p>
<p>  Since app logic has no special home it is spread over <del>views</del>view models. Those are fetching data from services and transforming it to their own structure, doing navigation to other views, etc. These extra responsibility only make changing the flow of the app and reusing the views more difficult. I am talking about view models like <a href="https://github.com/dotnetcurry/wpf-mvvmlight/blob/master/WPF_MVVMLight_CRUD/ViewModel/MainViewModel.cs">this</a>, <a href="https://github.com/MvvmCross/MvvmCross-Tutorials/blob/master/Sample%20-%20TwitterSearch/TwitterSearch.Core/ViewModels/TwitterViewModel.cs">this</a> and <a href="https://github.com/rid00z/FreshMvvm/blob/master/samples/FreshMvvmSampleApp/FreshMvvmSampleApp/PageModels/ContactPageModel.cs">this</a> one. In my opinion <del>views</del>view models should receive data, take care of the user interactions in the view and send out notifications/actions with the data the user has submitted. Here is a link to a blog post by Adam Kemp that goes in detail about <a href="http://blog.adamkemp.com/2015/03/decoupling-views.html">decoupled views</a>.</p>
</li>
<li><p><strong>Not good enough testing of the behaviour of the app due to issues described in the previous two points</strong></p>
<p>Testing of the app is limited to testing individual <del>views</del>view models, it is quite hard to test the flow of the app unless you are up for setting up a lot of infrastructure and usually plenty of mocking.</p>
</li>
</ul>
<p>MVVM frameworks that are on the market either (inadvertently) support these design shortcomings (dependency injection containers make it super easy to get all kinds of services in the view model with minimal effort) or at best do not address them at all. To be fair these frameworks are mostly trying to smooth out the MVVM pattern and are not trying too hard to advise you on app architecture but their samples are doing that in a way.</p>
<p>So back to those comments mentioned earlier.<br/> 
I wrote I am going to write <strong>my</strong> idea of a good mobile app and I would like to show you what I have been up to. Coming up real soon ;)</p>
<p><em>UPDATE:</em> fixed broken links to the examples</p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/comments-powered-by-github"/>
    <title>Comments powered by GitHub</title>
    <published>2015-06-08</published>
    <updated>2015-06-08</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>Maybe it&#39;s a bit too early to start meta-posting but I am starting to doubt the decisions I took regarding this so may be if  I go through the process of it I might feel a bit better.</p>
<p>This blog is hosted on GitHub pages. I am not entirely sure why GitHub has this service but it is very cool for us who use it. The deployment model is awesome (git push on a branch and you are done), it is free and hopefully with good CDN. That last part I will try to measure soon-ish. One important limitation - it is static pages only. Which calls for interesting combinations of static site generators and JavaScript.</p>
<p>GitHub does not provide any comment system as such, so the blogging story is somewhat incomplete. Which once again makes for a good challenge. Setting up a database and using it for comments is out of the question for me - have to host it somewhere, setting up all the processes around the management of comments - posting comments, reviewing, e-mail notifications, responding by e-mail, etc. It basically would erase the simplicity GitHub pages gives me.</p>
<p>There is <a href="https://disqus.com">Disqus</a>, they host and take care of all those things but in return you pay with your visitors/readers privacy. At a glance it looks like the their JavaScript API is fine so using their services is feasable but probably would have lost some level of customization. All in all not a bad option just feeling uneasy since it is not quite clear what kind of deal am I getting. </p>
<p>At this point I get this idea that it would be really awesome if I can somehow get the GitHub issue discussion page and embed it into my blog. I checked out the GitHub issues API - looked good; I googled around and found this <a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html">post by Ivan Zuzak</a> essentially implementing the same idea. I stole a whole lot of code from that post but I need a few more things to make it really work well.</p>
<p>So what are the pros and cons with the GitHub-issue-as-a-backend:</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Open API to access the comments, accessible by anyone, which is right - I do not own anyone&#39;s comments</li>
<li>GitHub handles sending email notifications as well as answering to comments by email</li>
<li>Full control over the HTML/CSS of the comments section</li>
<li>Trustworthy (so far) keeper of the data - GitHub</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>commenters do need a GitHub account</li>
</ul>
<p>  I believe my current and potential readers are the kind of people who do have a GitHub account so hopefully this one drawback does not matter, but if you would like to comment and don&#39;t have an account please tweet at <a href="https://twitter.com/pshomov">me</a> and I would proxy on your behalf.</p>
<p>  I think I feel better now ;-)</p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/worry-free-mvvm-with-xamarin-forms"/>
    <title>Worry-free MVVM with Xamarin Forms</title>
    <published>2015-05-25</published>
    <updated>2015-06-02</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p><strong>TL;DR</strong> - Super-clean MVVM example with automatic Command status updates <a href="https://github.com/pshomov/mvvmeasy">here</a></p>
<hr>
<p>Xamarin Forms is great for writing decent looking applications on all three major mobile platforms - iOS, Android and Windows Mobile. The Xaml support and databindings are great help to keep things clean and simple. </p>
<p>So I am working on a Xamarin Forms project where we were in the process of choosing some framework or library to help us with implementing the MVVM pattern and more specifically the view models where it is necessary to send notifications as properties get changed. We looked at <a href="http://www.mvvmlight.net">MvvmLight</a> as well as a preview version of <a href="http://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/">Prism</a>. Both of them provide a base class which has helper methods for implementing properties with sending notifications. Here is how a simple Login view model looks with Prism</p>
<script src="https://gist.github.com/pshomov/e35832cbf51c82ac50c7.js"></script>

<p>A couple of things to notice here:</p>
<ul>
<li>Lot&#39;s of repetitive code in the property getters and setters</li>
<li>Extra complexity in both the property setters and the command itself due to keeping the enabled/disabled state of the Login command in sync (lines 22, 30, 63 and 72)</li>
<li>We need extra (and may I say not particularly pretty) testing of whether the property change notifications were sent and the update of the Login command status was triggered</li>
</ul>
<p>In order to clean things up let&#39;s use <a href="https://github.com/Fody/PropertyChanged#your-code">Fody.PropertyChanged</a> and get rid of Prism&#39;s BindableBase. If you have not looked at this MVVM specialized weaver, please take your time now to get introduced. I think you might like it.
And here is how the new model looks like:</p>
<script src="https://gist.github.com/pshomov/eb3f85471e632bbcb9f6.js"></script>

<p>I think Fody.PropertyChanged is great, it helps us get rid of those super-boring, error-prone property getters and setters but unfortunately does nothing about updating the Login command state. In fact this version of the model does not work correctly since the Login command never gets enabled. One way to fix this problem is by making the Login command state be more MVVM-y. To do that let&#39;s use <a href="https://github.com/pshomov/mvvmeasy/blob/master/Infrastructure/MVVMCommand.cs">MVVMCommand</a> which is exactly like a normal Xamarin Forms Command except the second parameter has to be a lambda that returns the value of a property. Let&#39;s see how the fixed model looks:</p>
<script src="https://gist.github.com/pshomov/4b158ca0b0801809b0d6.js"></script>

<p>Notice how in line 28 the state of the command becomes extracted to a property - IsLoginEnabled. The reason that is good is because it plays on the strength of Fody.PropertyChanged. <strong>Meaning that Fody.PropertyChanged sends out ProprtyChanged notifications about IsLoginEnabled whenever one of the properties it&#39;s value is based on changes</strong>. Now all MVVMCommand needs to do is listen for those notifications and do the updating of the enabled/disabled command state. It&#39;s actually pretty simple:</p>
<script src="https://gist.github.com/pshomov/4e2b51ef94ca3c6cc508.js"></script>

<p>Testing this model now becomes really a rather simple and elegant exercise of changing properties and asserting on the value of other properties and no need to worry about bookkeeping regarding who update who.</p>
<p>Hope this makes sense, the source for a complete example is on <a href="https://github.com/pshomov/mvvmeasy">GitHub</a>.</p>
<p><del><strong>BTW</strong>: Sorry for not providing a way to do comments, now actively working on it, I promise. Meanwhile please <a href="https://github.com/pshomov/mvvmeasy/issues">create an issue on the example</a> and let&#39;s have the conversation over there ;)</del></p>
<p><strong>Update:</strong> As promised I have a way to post comments, but it&#39;s somewhat I-am-too-smart-for-my-own-good so I guess I will have to write a post about that ;) </p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/elements-visible-invisible-and-missing-part-2"/>
    <title>Elements - visible, invisible and missing (part 2)</title>
    <published>2014-05-31</published>
    <updated>2014-05-31</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>In my last post I was going over the elements of a blog that I use in my little experiment. Now, for the rest ...</p>
<p>What I have <em>not added</em> is links to similar posts, my twitter stream, blog rolls, archive, like button, retweet button, G+ button and all kinds of other buttons that are mostly create noise, do not look esthetically pleasing and seldomly used. Other omissions include footer, site map, copyright notices and all kinds of what I consider cruft.</p>
<p>Finally for the <em>invisible</em> - I have what seems to be an Atom feed for the web site and that one is machine discoverable but I decided to not make an official link to it on the site. Basically if you go to a site like <a href="http://feedly.com">Feedly</a> and paste the url for the blog, the feed link will be descovered and used. And that I think is enough visibility for that element. I think I will also try to surface that feed in the Google result if that is possible.</p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/elements-visible-invisible-and-missing-part-1"/>
    <title>Elements - visible, invisible and missing (part 1)</title>
    <published>2014-05-19</published>
    <updated>2014-05-19</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>I am trying to get my first visual iteration of the blog and it is taking longer then I expect (which in itself was expected, sigh ...) so I thought while I am working on that I should first briefly note the visual elements, the concepts if you will, that I have included here and the ones I have not. My understanding of design is a big part of it is about making choices of what you offer and also what you <em>do not</em> offer, both parts on par in their importance.</p>
<p>For the accidental visitors of my blog I would like them to first and foremost notice the content and then may be if they are interested make it easy get a feeling for who the auther is (that would be me).</p>
<p><strong>Content</strong> is a list of posts, each of which has a title, content and date of creation. That has to be the minimum with the obvious omission of comments. I mean I could have skipped date but I do find myself looking at the date of other people&#39;s posts so why shouldn&#39;t I do the same, right?
<br>Comments are not here mostly due to not having a particularly clear idea how to add them to my statically hosted blog. I have a feeling they are coming soon though.</p>
<p><strong>Author</strong> is the section where the visitor can get some <em>feeling</em> about the person writing those words.
A picture and a name should be a good start. The name itself is a link to the very first post in this blog where I indulged myself in a bit more of an introduction of my character. Thought that level of intimacy should require the trouble of clicking a link ;)
<br>GitHub and Twitter links to my accounts would reveal a bit more about me should the visitor feel compelled to find out more about yours truely.</p>
<p>I am pretty happy about my selection of elements, still it is definitely subject to change.</p>
<p>Next time - the <em>invisible</em> and all the things I did not add ...</p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/a-design-exercise"/>
    <title>A design exercise</title>
    <published>2014-05-07</published>
    <updated>2014-05-07</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>So I am all fired up about not sucking so much designing web and mobile apps and I though I really need some exercise. I recently read this great book - <a href="http://www.amazon.com/Design-Hackers-Reverse-Engineering-Beauty/dp/1119998956">Design for Hackers: Reverse Engineering Beauty</a> and I thought - why not start a blog in the rawest form possible and little by little try to make it better. Looking forward to iteration one ;) </p>
 ]]></content>
  </entry>
  
  <entry>
    <link type="text/html" rel="alternate" href="http://pshomov.github.io/introduction"/>
    <title>Introduction</title>
    <published>2014-05-02</published>
    <updated>2014-05-02</updated>
    <author>
      <name>Petar Shomov</name>
      <uri>http://pshomov.github.io/</uri>
    </author>
    <content type="html"><![CDATA[ <p>Hello, my name is Petar Shomov and this is my blog. I am a software developer with about 20 years in the industry. I think I am doing and learning about interesting things so I thought I should share them and probably do them even better because of that. I am interested most recently in design of all things digital but I like architect-y things as well as programm-y things. I work mostly in OSX and Linux but I have spent way too much time in Windows too.</p>
 ]]></content>
  </entry>
  
 
</feed>